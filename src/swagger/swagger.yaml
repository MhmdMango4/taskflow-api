openapi: 3.0.3
info:
  title: TaskFlow API
  description: A RESTful task management API built with Node.js, Express, and MongoDB.
  version: 1.0.0
  contact:
    name: Mohammed Mango
    email: mohammedmango4@gmail.com
  license:
    name: MIT

servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Tasks
    description: Manage your tasks (Create, Read, Update, Delete)

paths:
  /api/tasks:
    get:
      summary: Get all tasks
      tags: [Tasks]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    example: 2
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"
    post:
      summary: Create a new task
      tags: [Tasks]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskInput"
      responses:
        "201":
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task created successfully
                  data:
                    $ref: "#/components/schemas/Task"

  /api/tasks/{id}:
    get:
      summary: Get a task by ID
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The task ID
      responses:
        "200":
          description: A single task
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: "#/components/schemas/Task"
        "400":
          description: Invalid ID format
        "404":
          description: Task not found

    put:
      summary: Update a task by ID
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTaskInput"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task updated successfully
                  data:
                    $ref: "#/components/schemas/Task"

    delete:
      summary: Delete a task by ID
      tags: [Tasks]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The task ID
      responses:
        "200":
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Task deleted successfully
                  data:
                    $ref: "#/components/schemas/Task"

  /api/auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterInput"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /api/auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Task:
      type: object
      properties:
        _id:
          type: string
          example: "667a1b2c3d4e5f6a7b8c9d0e"
        title:
          type: string
          example: "Learn Swagger"
        description:
          type: string
          example: "Document my API beautifully"
        completed:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-06-20T10:00:00.000Z"
      required:
        - _id
        - title
        - completed
        - createdAt

    CreateTaskInput:
      type: object
      properties:
        title:
          type: string
          example: "New Task"
        description:
          type: string
          example: "Optional description"
        completed:
          type: boolean
          example: false
      required:
        - title

    UpdateTaskInput:
      type: object
      properties:
        title:
          type: string
          example: "Updated Title"
        description:
          type: string
          example: "Updated description"
        completed:
          type: boolean
          example: true
      # No required fields â€” partial updates allowed

    RegisterInput:
      type: object
      properties:
        name:
          type: string
          example: "Mohammed Mango"
        email:
          type: string
          example: "mohammedmango4@gmail.com"
        password:
          type: string
          example: "password123"
      required:
        - name
        - email
        - password

    LoginInput:
      type: object
      properties:
        name:
          type: string
          example: "Mohammed Mango"
        email:
          type: string
          example: "mohammedmango4@gmail.com"
        password:
          type: string
          example: "password123"
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "User registered successfully"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            id:
              type: string
              example: "667a1b2c3d4e5f6a7b8c9d0e"
            name:
              type: string
              example: "mohammed mango"
            email:
              type: string
              example: "mohammedmango4@gmail.com"
